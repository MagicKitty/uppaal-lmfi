<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// déclarations globales à tout le système
// canal de communication pour l'envoi de messages
chan MESSAGE[3];

// variable permettant de connaître la destination d'un message
int destination;

// définition d'un paquet/message
bool DATA;
bool ACK;
int no_seq;
int no_ack;

// variable permettant de savoir quel message envoyer et avec quels numéros de séquence et d'acquittement
int phase = 0;

// variable représentant le nombre de message qu'un voleur peut voler
int x;

// horloge globale
clock c;

// taille des données échangés par paquet
const int n = 10;

// time to live
const int TTL = 100;</declaration><template><name x="8" y="8">Machines</name><parameter>const int machineA, const int machineB, const int canal</parameter><declaration>// déclarations locales à l'automate Machines
void envoie(bool data, bool ack) {
  if (data == true and ack == false) {
    no_seq := 0;
    no_ack := 1;
  }
  if (data == false and ack == true) {
    int tmpSwap = no_seq;
    no_seq := no_ack;
    no_ack := tmpSwap + n;
  }
}</declaration><location id="id0" x="-2448" y="-1840"><name x="-2464" y="-1880">Data_Rcvd_2</name></location><location id="id1" x="-2704" y="-1840"><name x="-2720" y="-1880">Data_Rcvd_1</name></location><location id="id2" x="-2448" y="-2032"><name x="-2464" y="-2072">Data_Send_2</name></location><location id="id3" x="-2704" y="-2032"><name x="-2720" y="-2072">Data_Send_1</name></location><location id="id4" x="-2992" y="-1840"><name x="-3064" y="-1848">Serveur</name></location><location id="id5" x="-2992" y="-2032"><name x="-3008" y="-2072">Client</name></location><location id="id6" x="-3120" y="-2032"><name x="-3152" y="-2072">Established</name><committed/></location><init ref="id6"/><transition><source ref="id3"/><target ref="id3"/><label kind="guard" x="-2764" y="-2062">c &gt;= TTL</label><label kind="synchronisation" x="-2764" y="-2047">MESSAGE[canal]!</label><label kind="assignment" x="-2764" y="-2032">destination := machineB,
DATA := true,
ACK := false,
no_seq := 0,
no_ack := 1,
c := 0,
envoie(DATA,ACK)</label><nail x="-2680" y="-2200"/><nail x="-2488" y="-2168"/></transition><transition><source ref="id0"/><target ref="id4"/><nail x="-2512" y="-1744"/><nail x="-2896" y="-1744"/></transition><transition><source ref="id0"/><target ref="id1"/><nail x="-2480" y="-1808"/><nail x="-2672" y="-1808"/></transition><transition><source ref="id1"/><target ref="id0"/></transition><transition><source ref="id4"/><target ref="id1"/></transition><transition><source ref="id2"/><target ref="id5"/><nail x="-2512" y="-1968"/><nail x="-2936" y="-1968"/></transition><transition><source ref="id3"/><target ref="id5"/><nail x="-2736" y="-2000"/><nail x="-2928" y="-2000"/></transition><transition><source ref="id3"/><target ref="id2"/></transition><transition><source ref="id5"/><target ref="id3"/><label kind="synchronisation" x="-2912" y="-2144">MESSAGE[canal]!</label><label kind="assignment" x="-2912" y="-2129">destination := machineB,
DATA := true,
ACK := false,
no_seq := 0,
no_ack := 1,
envoie(DATA,ACK)</label></transition><transition><source ref="id5"/><target ref="id5"/><nail x="-3056" y="-1936"/><nail x="-3088" y="-1968"/></transition><transition><source ref="id4"/><target ref="id5"/><nail x="-2960" y="-1872"/><nail x="-2960" y="-1936"/></transition><transition><source ref="id5"/><target ref="id4"/><nail x="-3024" y="-1936"/><nail x="-3024" y="-1872"/></transition><transition><source ref="id6"/><target ref="id5"/></transition></template><template><name>Reseaux</name><parameter>const int canal</parameter><declaration>// déclarations locales à l'automate Reseaux
// machine destination pour le message
int machine_destination;</declaration><location id="id7" x="-1072" y="-472"><name x="-1088" y="-456">Lenteur</name></location><location id="id8" x="-912" y="-280"></location><location id="id9" x="-1232" y="-280"><name x="-1288" y="-288">Debut</name></location><init ref="id9"/><transition><source ref="id7"/><target ref="id9"/><label kind="guard" x="-1216" y="-400">c &lt;= 10</label><nail x="-1232" y="-472"/></transition><transition><source ref="id8"/><target ref="id7"/><nail x="-912" y="-472"/></transition><transition><source ref="id8"/><target ref="id9"/><label kind="synchronisation" x="-1168" y="-208">MESSAGE[machine_destination]!</label><nail x="-912" y="-216"/><nail x="-1232" y="-216"/></transition><transition><source ref="id9"/><target ref="id8"/><label kind="synchronisation" x="-1168" y="-328">MESSAGE[canal]?</label><label kind="assignment" x="-1168" y="-312">machine_destination := destination</label></transition></template><template><name>Voleurs</name><parameter>const int canal</parameter><location id="id10" x="-496" y="-144"><name x="-512" y="-128">Voleur</name></location><init ref="id10"/><transition><source ref="id10"/><target ref="id10"/><label kind="guard" x="-544" y="-280">x &lt; 1</label><label kind="synchronisation" x="-544" y="-296">MESSAGE[canal]!</label><label kind="assignment" x="-544" y="-264">x := x + 1</label><nail x="-432" y="-208"/><nail x="-432" y="-240"/><nail x="-560" y="-240"/><nail x="-560" y="-208"/></transition></template><system>// déclaration des réseaux, ce qui revient à déclarer le nombre de messages en parallèle
Reseau1 = Reseaux(0);
// déclaration des machines communicantes
MachineA = Machines(1,2,0);
MachineB = Machines(2,1,0);
// déclaration du voleur
Voleur1 = Voleurs(0);

// définition du système d'automates
system Reseau1, MachineA, MachineB, Voleur1;</system></nta>